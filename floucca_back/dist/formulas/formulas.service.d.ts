import { PrismaService } from "../prisma/prisma.service";
import { FishService } from "../backend/fish/fish.service";
import { LandingsService } from "../backend/landings/landings.service";
import { SenseLastwService } from "../backend/sense_lastw/sense_lastw.service";
import { GeneralFilterDto } from "../shared/dto/general_filter.dto";
import { GearService } from "../backend/gear/gear.service";
import { GetFilteredInterface } from "../backend/landings/interface/get_filtered.interface";
import { GetFilteredLastWInterface } from "../backend/sense_lastw/interface/get_filtered_lastw.interface";
import { GetEffortAndLandingInterface } from "./interface/get_effort_and_landing.interface";
import { GetAllGearInterface } from "../backend/gear/interface/get_all_gear.interface";
import { FishDataInterface } from "./interface/fish_data.interface";
export declare class FormulasService {
    private readonly prisma;
    private readonly fishService;
    private readonly landingsService;
    private readonly senseLastWService;
    private readonly gearService;
    constructor(prisma: PrismaService, fishService: FishService, landingsService: LandingsService, senseLastWService: SenseLastwService, gearService: GearService);
    getReport(filter: GeneralFilterDto): Promise<any>;
    getEffortAndLanding(effortData: GetFilteredLastWInterface[], landingData: GetFilteredInterface[], filter: GeneralFilterDto): Promise<GetEffortAndLandingInterface>;
    getSingularFishData(landingData: GetFilteredInterface[], estTotalCatch: number, totalEffort: number): Promise<FishDataInterface[]>;
    getCpue(landingData: GetFilteredInterface[]): Promise<number>;
    getEffortBySpecies(data: GetFilteredInterface[], cpue: number): Promise<number>;
    getPba(data: GetFilteredLastWInterface[]): Promise<number>;
    getTotalEffort(filter: GeneralFilterDto, data: GetFilteredLastWInterface[], pba: number): Promise<number>;
    getActiveDays(data: GetFilteredLastWInterface[], allGears: GetAllGearInterface[]): Promise<number>;
    getEstimateEffort(pba: number, data: GetFilteredLastWInterface[], allGears: GetAllGearInterface[]): Promise<number>;
    getEstimateCatchForAllSpecies(landingData: GetFilteredInterface[], estEffort: number): Promise<number>;
    getAvgFishPrice(data: GetFilteredInterface[]): Promise<number>;
    getAvgFishWeight(dataLanding: GetFilteredInterface[]): Promise<number>;
    getAvgFishLength(data: GetFilteredInterface[]): Promise<number>;
    getAvgFishQuantity(data: GetFilteredInterface[]): Promise<number>;
    getAvgFishWeightByKilo(data: GetFilteredInterface[], kg: number): Promise<number>;
    getEstimateSpeciesCatch(data: GetFilteredInterface[], estimatedTotalCatch: number): Promise<number>;
    getSpeciesCpue(estimatedSpeciesCatch: number, estimatedTotalEffort: number): Promise<number>;
    getEstimatedSpeciesValue(dataLanding: GetFilteredInterface[], estimatedSpeciesCatch: number): Promise<number>;
    getTotalCatch(landings: GetFilteredInterface[]): Promise<number>;
}
